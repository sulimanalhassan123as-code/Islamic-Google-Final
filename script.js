// --- SECTION TOGGLING LOGIC ---
const googleSearchSection = document.getElementById('google-search-section');
const aiSection = document.getElementById('ai-section');
const showAiBtn = document.getElementById('show-ai-btn');
const showSearchBtn = document.getElementById('show-search-btn');

showAiBtn.addEventListener('click', () => {
    googleSearchSection.classList.add('hidden');
    aiSection.classList.remove('hidden');
});

showSearchBtn.addEventListener('click', () => {
    aiSection.classList.add('hidden');
    googleSearchSection.classList.remove('hidden');
});


// --- GOOGLE SEARCH LOGIC (from before) ---
const searchForm = document.getElementById('search-form');
const searchInput = document.getElementById('search-input');
const resultsContainer = document.getElementById('search-results-container');
const loadingMessage = document.getElementById('loading-message');

searchForm.addEventListener('submit', function (event) {
  event.preventDefault();
  const query = searchInput.value;
  if (query) { fetchResults(query); }
});

async function fetchResults(query) {
  loadingMessage.textContent = 'Searching...';
  resultsContainer.innerHTML = '';
  const apiUrl = `/.netlify/functions/search?q=${encodeURIComponent(query)}`;
  try {
    const response = await fetch(apiUrl);
    if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
    const data = await response.json();
    displayResults(data);
  } catch (error) {
    console.error("Error fetching search results:", error);
    loadingMessage.textContent = 'Failed to fetch search results.';
  }
}

function displayResults(data) {
  loadingMessage.textContent = '';
  if (data.items && data.items.length > 0) {
    data.items.forEach(item => {
      const resultElement = document.createElement('div');
      resultElement.classList.add('search-result-item');
      resultElement.innerHTML = `
        <a href="${item.link}" target="_blank" class="result-title">${item.htmlTitle}</a>
        <p class="result-url">${item.formattedUrl}</p>
        <p class="result-snippet">${item.htmlSnippet}</p>
      `;
      resultsContainer.appendChild(resultElement);
    });
  } else {
    loadingMessage.textContent = 'No results found for your query.';
  }
}


// --- NEW GEMINI AI LOGIC ---
const aiForm = document.getElementById('ai-form');
const aiQuestionInput = document.getElementById('ai-question-input');
const aiAnswerContainer = document.getElementById('ai-answer-container');
const aiLoadingMessage = document.getElementById('ai-loading-message');

aiForm.addEventListener('submit', async function(event) {
    event.preventDefault();
    const question = aiQuestionInput.value;
    if (!question) return;

    aiLoadingMessage.textContent = 'AI is thinking...';
    aiAnswerContainer.innerHTML = '';

    const apiUrl = '/.netlify/functions/ask';

    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ question: question })
        });
        if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
        const data = await response.json();
        displayAiAnswer(data.answer);

    } catch (error) {
        console.error("Error with AI function:", error);
        aiLoadingMessage.textContent = 'Sorry, there was an error.';
    }
});

function displayAiAnswer(answer) {
    aiLoadingMessage.textContent = '';
    
    // Sanitize and format the answer
    let formattedAnswer = answer
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold
        .replace(/\*(.*?)\*/g, '<em>$1</em>')       // Italics
        .replace(/\n/g, '<br>');                   // New lines

    aiAnswerContainer.innerHTML = `
        <div class="ai-answer">
            <p>${formattedAnswer}</p>
            <p class="disclaimer"><em>This answer was generated by an AI. Please consult a qualified scholar for important religious matters.</em></p>
        </div>
    `;
}```

---

Suleiman, I will stop here for now to not overwhelm you. There is one last small change we need to make to your `style.css` file to make the new AI section look beautiful.

**Please, complete these three steps first.** After you have created the new `ask.js` file and updated your `index.html` and `script.js`, just tell me:

**"Okay, I am ready for the final CSS."**

And I will give you the final piece of the puzzle. You are building something truly special. Let's do this.
